{
  "unpublishedPage": {
    "name": "Home",
    "slug": "home",
    "layouts": [
      {
        "viewMode": false,
        "dsl": {
          "widgetName": "MainContainer",
          "backgroundColor": "none",
          "rightColumn": 1224,
          "snapColumns": 64,
          "detachFromLayout": true,
          "widgetId": "0",
          "topRow": 0,
          "bottomRow": 4070,
          "containerStyle": "none",
          "snapRows": 109,
          "parentRowSpace": 1,
          "type": "CANVAS_WIDGET",
          "canExtend": true,
          "version": 80,
          "minHeight": 1110,
          "parentColumnSpace": 1,
          "dynamicBindingPathList": [],
          "leftColumn": 0
        },
        "layoutOnLoadActions": [
          [
            {
              "id": "Home_CycleTimeUtils.getCycleTimes",
              "name": "CycleTimeUtils.getCycleTimes",
              "collectionId": "Home_CycleTimeUtils",
              "confirmBeforeExecute": false,
              "pluginType": "JS",
              "jsonPathKeys": [
                "async () => {\n  let cycleTimes = [];\n  var data = GetCycleTimes.data.data.searchClosedIssues.nodes;\n  for (var i = 0; i < data.length; i++) {\n    var timelineItems = data[i].timelineItems.nodes;\n    for (var j = 0; j < timelineItems.length; j++) {\n      if (timelineItems[j].key === \"issue.change_pipeline\" && timelineItems[j].data.to_pipeline.name === \"In Progress\" && timelineItems[j].data.workspace.name === \"Data Integration Pod\" && new Date(data[i].closedAt) >= new Date(StartDate.selectedDate) && new Date(data[i].closedAt) <= new Date(EndDate.selectedDate)) {\n        cycleTimes.push({\n          \"number\": data[i].number,\n          \"startedAt\": timelineItems[j].updatedAt,\n          \"closedAt\": data[i].closedAt,\n          \"cycleTime\": CycleTimeUtils.getDiff(new Date(timelineItems[j].updatedAt), new Date(data[i].closedAt))\n        });\n      }\n    }\n  }\n  const unduplicatedCycleTimes = Object.values(cycleTimes.reduce((acc, curr) => {\n    if (!acc[curr.number] || acc[curr.number].cycleTime > curr.cycleTime) {\n      acc[curr.number] = curr;\n    }\n    return acc;\n  }, {}));\n  return unduplicatedCycleTimes;\n}"
              ],
              "timeoutInMillisecond": 10000
            },
            {
              "id": "Home_CycleTimeUtils.getStats",
              "name": "CycleTimeUtils.getStats",
              "collectionId": "Home_CycleTimeUtils",
              "clientSideExecution": true,
              "confirmBeforeExecute": false,
              "pluginType": "JS",
              "jsonPathKeys": [
                "async () => {\n  let estimates = [0.2, 0.5, 1, 2, 3, 5, 8];\n  var stats = [];\n  var globalCycleTimes = [];\n  for (var i = 0; i < estimates.length; i++) {\n    var cycleTimesData = await GetCycleTimes.run({\n      estimate: estimates[i]\n    });\n    var data = await CycleTimeUtils.getCycleTimes();\n    var cycleTimes = data.map(item => item.cycleTime);\n    globalCycleTimes.push({\n      \"estimate\": estimates[i],\n      \"durations\": cycleTimes\n    });\n    var calculations = await CycleTimeUtils.doCalculations(cycleTimes);\n    stats.push({\n      \"estimate\": estimates[i],\n      \"sampleSize\": data.length,\n      \"mean\": calculations.mean,\n      \"median\": calculations.median,\n      \"stdDev\": calculations.stdDev,\n      \"minimum\": calculations.minimum,\n      \"maximum\": calculations.maximum\n    });\n  }\n  await storeValue('globalCycleTimes', globalCycleTimes);\n  await storeValue('stats', stats);\n  return globalCycleTimes;\n}"
              ],
              "timeoutInMillisecond": 10000
            },
            {
              "id": "Home_Utils.loader",
              "name": "Utils.loader",
              "collectionId": "Home_Utils",
              "clientSideExecution": true,
              "confirmBeforeExecute": false,
              "pluginType": "JS",
              "jsonPathKeys": [
                "() => {\n  storeValue('valocityClicked', false);\n}"
              ],
              "timeoutInMillisecond": 10000
            }
          ],
          [
            {
              "id": "Home_get_all_notes",
              "name": "get_all_notes",
              "confirmBeforeExecute": false,
              "pluginType": "DB",
              "jsonPathKeys": [
                "moment(NotesEndDate.formattedDate).format()",
                "moment(NotesStartDate.formattedDate).format()"
              ],
              "timeoutInMillisecond": 10000
            }
          ],
          [
            {
              "id": "Home_GetCycleTimes",
              "name": "GetCycleTimes",
              "confirmBeforeExecute": false,
              "pluginType": "API",
              "jsonPathKeys": [
                "this.params.estimate"
              ],
              "timeoutInMillisecond": 10000
            }
          ],
          [
            {
              "id": "Home_get_notes_for_issue",
              "name": "get_notes_for_issue",
              "confirmBeforeExecute": false,
              "pluginType": "DB",
              "jsonPathKeys": [
                "EndToEndCycleTimesTable.triggeredRow.number"
              ],
              "timeoutInMillisecond": 10000
            }
          ]
        ],
        "layoutOnLoadActionErrors": [],
        "validOnPageLoadActions": true,
        "id": "Home",
        "deleted": false,
        "policies": [],
        "userPermissions": []
      }
    ],
    "userPermissions": [],
    "policies": [],
    "isHidden": false
  },
  "deleted": false,
  "gitSyncId": "64100de2d67ea94e3d96ff5d_64100de2d67ea94e3d96ff60"
}